name: CICD
run-name: Running
on:
  push:
    branches:
      - production    # production이라는 브런치로 푸쉬했을 때 실행
      - 'releases/**'

env:
  AWS_REGION: ap-northeast-2
  AWS_S3_BUCKET: app-release-files
  AWS_CODE_BUCKET_NAME: tnote-bucket-cicd
  AWS_CODE_DEPLOY_APPLICATION: cd-tnote-cicd
  AWS_CODE_DEPLOY_GROUP: group-tnote-cicd

jobs:
  build-with-gradle:
    runs-on: ubuntu-20.04   # ubuntu ver
    steps:
      - name: production 브랜치로 이동
        uses: actions/checkout@v3
        with:
          ref: production

      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: gradlew에 실행 권한 부여
        run: chmod +x ./gradlew

      - name: 프로젝트 빌드
        run: ./gradlew clean build -Pjasypt.encryptor.password=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}

      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: AWS credential 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CICD_SECRET_KEY }}

      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/tnote .
          docker push ${{ secrets.DOCKER_USERNAME }}/tnote

      - name: S3에 업로드
        run: aws deploy push --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} --ignore-hidden-files --s3-location s3://${{ env.AWS_CODE_BUCKET_NAME }}/cicdDir/$GITHUB_SHA.zip --source .

      - name: EC2에 배포
        run: aws deploy create-deployment --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }} --s3-location bucket=${{ env.AWS_CODE_BUCKET_NAME }},key=cicdDir/$GITHUB_SHA.zip,bundleType=zip
      

      #AWS EC2 Server Connect
      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
